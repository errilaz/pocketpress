import { Markup } from "./markup"
import { SiteBuild } from "./model"

// Basics

const raw = Markup.raw
const prop = Markup.prop
const elem = Markup.elem
const rule = Markup.rule
const markdown = Markup.markdown
const livescript = Markup.livescript
const document = Markup.document
const stylesheet = Markup.stylesheet
const quote = Markup.quote

// Elements 

const a = Markup.element("a", false)
const abbr = Markup.element("abbr", false)
const address = Markup.element("address", false)
const area = Markup.element("area", true)
const article = Markup.element("article", false)
const aside = Markup.element("aside", false)
const audio = Markup.element("audio", false)
const b = Markup.element("b", false)
const base = Markup.element("base", true)
const bdi = Markup.element("bdi", false)
const bdo = Markup.element("bdo", false)
const blockquote = Markup.element("blockquote", false)
const body = Markup.element("body", false)
const br = Markup.element("br", true)
const button = Markup.element("button", false)
const canvas = Markup.element("canvas", false)
const caption = Markup.element("caption", false)
const cite = Markup.element("cite", false)
const code = Markup.element("code", false)
const col = Markup.element("col", true)
const colgroup = Markup.element("colgroup", false)
const data = Markup.element("data", false)
const datalist = Markup.element("datalist", false)
const dd = Markup.element("dd", false)
const del = Markup.element("del", false)
const details = Markup.element("details", false)
const dfn = Markup.element("dfn", false)
const dialog = Markup.element("dialog", false)
const div = Markup.element("div", false)
const dl = Markup.element("dl", false)
const dt = Markup.element("dt", false)
const em = Markup.element("em", false)
const embed = Markup.element("embed", true)
const fieldset = Markup.element("fieldset", false)
const figcaption = Markup.element("figcaption", false)
const figure = Markup.element("figure", false)
const footer = Markup.element("footer", false)
const form = Markup.element("form", false)
const h1 = Markup.element("h1", false)
const h2 = Markup.element("h2", false)
const h3 = Markup.element("h3", false)
const h4 = Markup.element("h4", false)
const h5 = Markup.element("h5", false)
const h6 = Markup.element("h6", false)
const head = Markup.element("head", false)
const header = Markup.element("header", false)
const hgroup = Markup.element("hgroup", false)
const hr = Markup.element("hr", true)
const html = Markup.element("html", false)
const i = Markup.element("i", false)
const iframe = Markup.element("iframe", false)
const img = Markup.element("img", true)
const input = Markup.element("input", true)
const ins = Markup.element("ins", false)
const kbd = Markup.element("kbd", false)
const label = Markup.element("label", false)
const legend = Markup.element("legend", false)
const li = Markup.element("li", false)
const link = Markup.element("link", true)
const main = Markup.element("main", false)
const map = Markup.element("map", false)
const mark = Markup.element("mark", false)
const math = Markup.element("math", false)
const menu = Markup.element("menu", false)
const menuitem = Markup.element("menuitem", true)
const meta = Markup.element("meta", true)
const meter = Markup.element("meter", false)
const nav = Markup.element("nav", false)
const noscript = Markup.element("noscript", false)
const object = Markup.element("object", false)
const ol = Markup.element("ol", false)
const optgroup = Markup.element("optgroup", false)
const option = Markup.element("option", false)
const output = Markup.element("output", false)
const p = Markup.element("p", false)
const param = Markup.element("param", true)
const picture = Markup.element("picture", false)
const pre = Markup.element("pre", false)
const progress = Markup.element("progress", false)
const q = Markup.element("q", false)
const rb = Markup.element("rb", false)
const rp = Markup.element("rp", false)
const rt = Markup.element("rt", false)
const rtc = Markup.element("rtc", false)
const ruby = Markup.element("ruby", false)
const s = Markup.element("s", false)
const samp = Markup.element("samp", false)
const script = Markup.element("script", false)
const section = Markup.element("section", false)
const select = Markup.element("select", false)
const slot = Markup.element("slot", false)
const small = Markup.element("small", false)
const source = Markup.element("source", true)
const span = Markup.element("span", false)
const strong = Markup.element("strong", false)
const style = Markup.element("style", false)
const sub = Markup.element("sub", false)
const summary = Markup.element("summary", false)
const sup = Markup.element("sup", false)
const svg = Markup.element("svg", false)
const table = Markup.element("table", false)
const tbody = Markup.element("tbody", false)
const td = Markup.element("td", false)
const template = Markup.element("template", false)
const textarea = Markup.element("textarea", false)
const tfoot = Markup.element("tfoot", false)
const th = Markup.element("th", false)
const thead = Markup.element("thead", false)
const time = Markup.element("time", false)
const title = Markup.element("title", false)
const tr = Markup.element("tr", false)
const track = Markup.element("track", true)
const u = Markup.element("u", false)
const ul = Markup.element("ul", false)
const _var = Markup.element("var", false)
const video = Markup.element("video", false)
const wbr = Markup.element("wbr", true)

// Properties

const internalTextAutosizingStatus = Markup.property("-internal-text-autosizing-status")
const accelerator = Markup.property("accelerator")
const accentColor = Markup.property("accent-color")
const wapAccesskey = Markup.property("-wap-accesskey")
const additiveSymbols = Markup.property("additive-symbols")
const alignContent = Markup.property("align-content")
const webkitAlignContent = Markup.property("-webkit-align-content")
const alignItems = Markup.property("align-items")
const webkitAlignItems = Markup.property("-webkit-align-items")
const alignSelf = Markup.property("align-self")
const webkitAlignSelf = Markup.property("-webkit-align-self")
const alignmentBaseline = Markup.property("alignment-baseline")
const all = Markup.property("all")
const alt = Markup.property("alt")
const webkitAlt = Markup.property("-webkit-alt")
const animation = Markup.property("animation")
const animationComposition = Markup.property("animation-composition")
const animationDelay = Markup.property("animation-delay")
const animationDelayEnd = Markup.property("animation-delay-end")
const mozAnimationDelay = Markup.property("-moz-animation-delay")
const msAnimationDelay = Markup.property("-ms-animation-delay")
const animationDelayStart = Markup.property("animation-delay-start")
const webkitAnimationDelay = Markup.property("-webkit-animation-delay")
const animationDirection = Markup.property("animation-direction")
const mozAnimationDirection = Markup.property("-moz-animation-direction")
const msAnimationDirection = Markup.property("-ms-animation-direction")
const webkitAnimationDirection = Markup.property("-webkit-animation-direction")
const animationDuration = Markup.property("animation-duration")
const mozAnimationDuration = Markup.property("-moz-animation-duration")
const msAnimationDuration = Markup.property("-ms-animation-duration")
const webkitAnimationDuration = Markup.property("-webkit-animation-duration")
const animationFillMode = Markup.property("animation-fill-mode")
const mozAnimationFillMode = Markup.property("-moz-animation-fill-mode")
const msAnimationFillMode = Markup.property("-ms-animation-fill-mode")
const webkitAnimationFillMode = Markup.property("-webkit-animation-fill-mode")
const animationIterationCount = Markup.property("animation-iteration-count")
const mozAnimationIterationCount = Markup.property("-moz-animation-iteration-count")
const msAnimationIterationCount = Markup.property("-ms-animation-iteration-count")
const webkitAnimationIterationCount = Markup.property("-webkit-animation-iteration-count")
const mozAnimation = Markup.property("-moz-animation")
const msAnimation = Markup.property("-ms-animation")
const animationName = Markup.property("animation-name")
const mozAnimationName = Markup.property("-moz-animation-name")
const msAnimationName = Markup.property("-ms-animation-name")
const webkitAnimationName = Markup.property("-webkit-animation-name")
const animationPlayState = Markup.property("animation-play-state")
const mozAnimationPlayState = Markup.property("-moz-animation-play-state")
const msAnimationPlayState = Markup.property("-ms-animation-play-state")
const webkitAnimationPlayState = Markup.property("-webkit-animation-play-state")
const animationRange = Markup.property("animation-range")
const animationTimingFunction = Markup.property("animation-timing-function")
const mozAnimationTimingFunction = Markup.property("-moz-animation-timing-function")
const msAnimationTimingFunction = Markup.property("-ms-animation-timing-function")
const webkitAnimationTimingFunction = Markup.property("-webkit-animation-timing-function")
const webkitAnimationTrigger = Markup.property("-webkit-animation-trigger")
const webkitAnimation = Markup.property("-webkit-animation")
const appRegion = Markup.property("app-region")
const webkitAppRegion = Markup.property("-webkit-app-region")
const appearance = Markup.property("appearance")
const mozAppearance = Markup.property("-moz-appearance")
const webkitAppearance = Markup.property("-webkit-appearance")
const ascentOverride = Markup.property("ascent-override")
const aspectRatio = Markup.property("aspect-ratio")
const webkitAspectRatio = Markup.property("-webkit-aspect-ratio")
const audioLevel = Markup.property("audio-level")
const azimuth = Markup.property("azimuth")
const backdropFilter = Markup.property("backdrop-filter")
const webkitBackdropFilter = Markup.property("-webkit-backdrop-filter")
const backfaceVisibility = Markup.property("backface-visibility")
const mozBackfaceVisibility = Markup.property("-moz-backface-visibility")
const msBackfaceVisibility = Markup.property("-ms-backface-visibility")
const webkitBackfaceVisibility = Markup.property("-webkit-backface-visibility")
const background = Markup.property("background")
const backgroundAttachment = Markup.property("background-attachment")
const webkitBackgroundAttachment = Markup.property("-webkit-background-attachment")
const backgroundBlendMode = Markup.property("background-blend-mode")
const backgroundClip = Markup.property("background-clip")
const mozBackgroundClip = Markup.property("-moz-background-clip")
const webkitBackgroundClip = Markup.property("-webkit-background-clip")
const backgroundColor = Markup.property("background-color")
const webkitBackgroundColor = Markup.property("-webkit-background-color")
const webkitBackgroundComposite = Markup.property("-webkit-background-composite")
const backgroundImage = Markup.property("background-image")
const webkitBackgroundImage = Markup.property("-webkit-background-image")
const mozBackgroundInlinePolicy = Markup.property("-moz-background-inline-policy")
const backgroundOrigin = Markup.property("background-origin")
const mozBackgroundOrigin = Markup.property("-moz-background-origin")
const webkitBackgroundOrigin = Markup.property("-webkit-background-origin")
const backgroundPosition = Markup.property("background-position")
const webkitBackgroundPosition = Markup.property("-webkit-background-position")
const backgroundPositionX = Markup.property("background-position-x")
const webkitBackgroundPositionX = Markup.property("-webkit-background-position-x")
const backgroundPositionY = Markup.property("background-position-y")
const webkitBackgroundPositionY = Markup.property("-webkit-background-position-y")
const backgroundRepeat = Markup.property("background-repeat")
const webkitBackgroundRepeat = Markup.property("-webkit-background-repeat")
const backgroundRepeatX = Markup.property("background-repeat-x")
const backgroundRepeatY = Markup.property("background-repeat-y")
const backgroundSize = Markup.property("background-size")
const mozBackgroundSize = Markup.property("-moz-background-size")
const webkitBackgroundSize = Markup.property("-webkit-background-size")
const webkitBackground = Markup.property("-webkit-background")
const basePalette = Markup.property("base-palette")
const baselineShift = Markup.property("baseline-shift")
const baselineSource = Markup.property("baseline-source")
const behavior = Markup.property("behavior")
const mozBinding = Markup.property("-moz-binding")
const blockEllipsis = Markup.property("block-ellipsis")
const msBlockProgression = Markup.property("-ms-block-progression")
const blockSize = Markup.property("block-size")
const blockStep = Markup.property("block-step")
const blockStepAlign = Markup.property("block-step-align")
const blockStepInsert = Markup.property("block-step-insert")
const blockStepRound = Markup.property("block-step-round")
const blockStepSize = Markup.property("block-step-size")
const bookmarkLabel = Markup.property("bookmark-label")
const bookmarkLevel = Markup.property("bookmark-level")
const bookmarkState = Markup.property("bookmark-state")
const border = Markup.property("border")
const webkitBorderAfterColor = Markup.property("-webkit-border-after-color")
const webkitBorderAfterStyle = Markup.property("-webkit-border-after-style")
const webkitBorderAfter = Markup.property("-webkit-border-after")
const webkitBorderAfterWidth = Markup.property("-webkit-border-after-width")
const webkitBorderBeforeColor = Markup.property("-webkit-border-before-color")
const webkitBorderBeforeStyle = Markup.property("-webkit-border-before-style")
const webkitBorderBefore = Markup.property("-webkit-border-before")
const webkitBorderBeforeWidth = Markup.property("-webkit-border-before-width")
const borderBlock = Markup.property("border-block")
const borderBlockColor = Markup.property("border-block-color")
const borderBlockEnd = Markup.property("border-block-end")
const borderBlockEndColor = Markup.property("border-block-end-color")
const borderBlockEndStyle = Markup.property("border-block-end-style")
const borderBlockEndWidth = Markup.property("border-block-end-width")
const borderBlockStart = Markup.property("border-block-start")
const borderBlockStartColor = Markup.property("border-block-start-color")
const borderBlockStartStyle = Markup.property("border-block-start-style")
const borderBlockStartWidth = Markup.property("border-block-start-width")
const borderBlockStyle = Markup.property("border-block-style")
const borderBlockWidth = Markup.property("border-block-width")
const borderBottom = Markup.property("border-bottom")
const borderBottomColor = Markup.property("border-bottom-color")
const mozBorderBottomColors = Markup.property("-moz-border-bottom-colors")
const borderBottomLeftRadius = Markup.property("border-bottom-left-radius")
const webkitBorderBottomLeftRadius = Markup.property("-webkit-border-bottom-left-radius")
const borderBottomRightRadius = Markup.property("border-bottom-right-radius")
const webkitBorderBottomRightRadius = Markup.property("-webkit-border-bottom-right-radius")
const borderBottomStyle = Markup.property("border-bottom-style")
const borderBottomWidth = Markup.property("border-bottom-width")
const borderBoundary = Markup.property("border-boundary")
const borderCollapse = Markup.property("border-collapse")
const borderColor = Markup.property("border-color")
const mozBorderEndColor = Markup.property("-moz-border-end-color")
const webkitBorderEndColor = Markup.property("-webkit-border-end-color")
const borderEndEndRadius = Markup.property("border-end-end-radius")
const mozBorderEnd = Markup.property("-moz-border-end")
const borderEndStartRadius = Markup.property("border-end-start-radius")
const mozBorderEndStyle = Markup.property("-moz-border-end-style")
const webkitBorderEndStyle = Markup.property("-webkit-border-end-style")
const webkitBorderEnd = Markup.property("-webkit-border-end")
const mozBorderEndWidth = Markup.property("-moz-border-end-width")
const webkitBorderEndWidth = Markup.property("-webkit-border-end-width")
const webkitBorderFit = Markup.property("-webkit-border-fit")
const webkitBorderHorizontalSpacing = Markup.property("-webkit-border-horizontal-spacing")
const borderImage = Markup.property("border-image")
const mozBorderImage = Markup.property("-moz-border-image")
const oBorderImage = Markup.property("-o-border-image")
const borderImageOutset = Markup.property("border-image-outset")
const webkitBorderImageOutset = Markup.property("-webkit-border-image-outset")
const borderImageRepeat = Markup.property("border-image-repeat")
const webkitBorderImageRepeat = Markup.property("-webkit-border-image-repeat")
const borderImageSlice = Markup.property("border-image-slice")
const webkitBorderImageSlice = Markup.property("-webkit-border-image-slice")
const borderImageSource = Markup.property("border-image-source")
const webkitBorderImageSource = Markup.property("-webkit-border-image-source")
const webkitBorderImage = Markup.property("-webkit-border-image")
const borderImageWidth = Markup.property("border-image-width")
const webkitBorderImageWidth = Markup.property("-webkit-border-image-width")
const borderInline = Markup.property("border-inline")
const borderInlineColor = Markup.property("border-inline-color")
const borderInlineEnd = Markup.property("border-inline-end")
const borderInlineEndColor = Markup.property("border-inline-end-color")
const borderInlineEndStyle = Markup.property("border-inline-end-style")
const borderInlineEndWidth = Markup.property("border-inline-end-width")
const borderInlineStart = Markup.property("border-inline-start")
const borderInlineStartColor = Markup.property("border-inline-start-color")
const borderInlineStartStyle = Markup.property("border-inline-start-style")
const borderInlineStartWidth = Markup.property("border-inline-start-width")
const borderInlineStyle = Markup.property("border-inline-style")
const borderInlineWidth = Markup.property("border-inline-width")
const borderLeft = Markup.property("border-left")
const borderLeftColor = Markup.property("border-left-color")
const mozBorderLeftColors = Markup.property("-moz-border-left-colors")
const borderLeftStyle = Markup.property("border-left-style")
const borderLeftWidth = Markup.property("border-left-width")
const borderRadius = Markup.property("border-radius")
const mozBorderRadiusBottomleft = Markup.property("-moz-border-radius-bottomleft")
const mozBorderRadiusBottomright = Markup.property("-moz-border-radius-bottomright")
const mozBorderRadius = Markup.property("-moz-border-radius")
const mozBorderRadiusTopleft = Markup.property("-moz-border-radius-topleft")
const mozBorderRadiusTopright = Markup.property("-moz-border-radius-topright")
const webkitBorderRadius = Markup.property("-webkit-border-radius")
const borderRight = Markup.property("border-right")
const borderRightColor = Markup.property("border-right-color")
const mozBorderRightColors = Markup.property("-moz-border-right-colors")
const borderRightStyle = Markup.property("border-right-style")
const borderRightWidth = Markup.property("border-right-width")
const borderSpacing = Markup.property("border-spacing")
const mozBorderStartColor = Markup.property("-moz-border-start-color")
const webkitBorderStartColor = Markup.property("-webkit-border-start-color")
const borderStartEndRadius = Markup.property("border-start-end-radius")
const mozBorderStart = Markup.property("-moz-border-start")
const borderStartStartRadius = Markup.property("border-start-start-radius")
const mozBorderStartStyle = Markup.property("-moz-border-start-style")
const webkitBorderStartStyle = Markup.property("-webkit-border-start-style")
const webkitBorderStart = Markup.property("-webkit-border-start")
const mozBorderStartWidth = Markup.property("-moz-border-start-width")
const webkitBorderStartWidth = Markup.property("-webkit-border-start-width")
const borderStyle = Markup.property("border-style")
const borderTop = Markup.property("border-top")
const borderTopColor = Markup.property("border-top-color")
const mozBorderTopColors = Markup.property("-moz-border-top-colors")
const borderTopLeftRadius = Markup.property("border-top-left-radius")
const webkitBorderTopLeftRadius = Markup.property("-webkit-border-top-left-radius")
const borderTopRightRadius = Markup.property("border-top-right-radius")
const webkitBorderTopRightRadius = Markup.property("-webkit-border-top-right-radius")
const borderTopStyle = Markup.property("border-top-style")
const borderTopWidth = Markup.property("border-top-width")
const webkitBorderVerticalSpacing = Markup.property("-webkit-border-vertical-spacing")
const borderWidth = Markup.property("border-width")
const bottom = Markup.property("bottom")
const mozBoxAlign = Markup.property("-moz-box-align")
const webkitBoxAlign = Markup.property("-webkit-box-align")
const boxDecorationBreak = Markup.property("box-decoration-break")
const webkitBoxDecorationBreak = Markup.property("-webkit-box-decoration-break")
const mozBoxDirection = Markup.property("-moz-box-direction")
const webkitBoxDirection = Markup.property("-webkit-box-direction")
const webkitBoxFlexGroup = Markup.property("-webkit-box-flex-group")
const mozBoxFlex = Markup.property("-moz-box-flex")
const webkitBoxFlex = Markup.property("-webkit-box-flex")
const webkitBoxLines = Markup.property("-webkit-box-lines")
const mozBoxOrdinalGroup = Markup.property("-moz-box-ordinal-group")
const webkitBoxOrdinalGroup = Markup.property("-webkit-box-ordinal-group")
const mozBoxOrient = Markup.property("-moz-box-orient")
const webkitBoxOrient = Markup.property("-webkit-box-orient")
const mozBoxPack = Markup.property("-moz-box-pack")
const webkitBoxPack = Markup.property("-webkit-box-pack")
const webkitBoxReflect = Markup.property("-webkit-box-reflect")
const boxShadow = Markup.property("box-shadow")
const mozBoxShadow = Markup.property("-moz-box-shadow")
const webkitBoxShadow = Markup.property("-webkit-box-shadow")
const boxSizing = Markup.property("box-sizing")
const mozBoxSizing = Markup.property("-moz-box-sizing")
const webkitBoxSizing = Markup.property("-webkit-box-sizing")
const boxSnap = Markup.property("box-snap")
const breakAfter = Markup.property("break-after")
const breakBefore = Markup.property("break-before")
const breakInside = Markup.property("break-inside")
const bufferedRendering = Markup.property("buffered-rendering")
const captionSide = Markup.property("caption-side")
const caret = Markup.property("caret")
const caretColor = Markup.property("caret-color")
const caretShape = Markup.property("caret-shape")
const chains = Markup.property("chains")
const clear = Markup.property("clear")
const clip = Markup.property("clip")
const clipPath = Markup.property("clip-path")
const webkitClipPath = Markup.property("-webkit-clip-path")
const clipRule = Markup.property("clip-rule")
const color = Markup.property("color")
const colorAdjust = Markup.property("color-adjust")
const webkitColorCorrection = Markup.property("-webkit-color-correction")
const appleColorFilter = Markup.property("-apple-color-filter")
const colorInterpolation = Markup.property("color-interpolation")
const colorInterpolationFilters = Markup.property("color-interpolation-filters")
const colorProfile = Markup.property("color-profile")
const colorRendering = Markup.property("color-rendering")
const colorScheme = Markup.property("color-scheme")
const webkitColumnAxis = Markup.property("-webkit-column-axis")
const webkitColumnBreakAfter = Markup.property("-webkit-column-break-after")
const webkitColumnBreakBefore = Markup.property("-webkit-column-break-before")
const webkitColumnBreakInside = Markup.property("-webkit-column-break-inside")
const columnCount = Markup.property("column-count")
const mozColumnCount = Markup.property("-moz-column-count")
const webkitColumnCount = Markup.property("-webkit-column-count")
const columnFill = Markup.property("column-fill")
const mozColumnFill = Markup.property("-moz-column-fill")
const webkitColumnFill = Markup.property("-webkit-column-fill")
const columnGap = Markup.property("column-gap")
const mozColumnGap = Markup.property("-moz-column-gap")
const webkitColumnGap = Markup.property("-webkit-column-gap")
const columnProgression = Markup.property("column-progression")
const webkitColumnProgression = Markup.property("-webkit-column-progression")
const columnRule = Markup.property("column-rule")
const columnRuleColor = Markup.property("column-rule-color")
const mozColumnRuleColor = Markup.property("-moz-column-rule-color")
const webkitColumnRuleColor = Markup.property("-webkit-column-rule-color")
const mozColumnRule = Markup.property("-moz-column-rule")
const columnRuleStyle = Markup.property("column-rule-style")
const mozColumnRuleStyle = Markup.property("-moz-column-rule-style")
const webkitColumnRuleStyle = Markup.property("-webkit-column-rule-style")
const webkitColumnRule = Markup.property("-webkit-column-rule")
const columnRuleWidth = Markup.property("column-rule-width")
const mozColumnRuleWidth = Markup.property("-moz-column-rule-width")
const webkitColumnRuleWidth = Markup.property("-webkit-column-rule-width")
const columnSpan = Markup.property("column-span")
const mozColumnSpan = Markup.property("-moz-column-span")
const webkitColumnSpan = Markup.property("-webkit-column-span")
const columnWidth = Markup.property("column-width")
const mozColumnWidth = Markup.property("-moz-column-width")
const webkitColumnWidth = Markup.property("-webkit-column-width")
const columns = Markup.property("columns")
const mozColumns = Markup.property("-moz-columns")
const webkitColumns = Markup.property("-webkit-columns")
const webkitCompositionFillColor = Markup.property("-webkit-composition-fill-color")
const webkitCompositionFrameColor = Markup.property("-webkit-composition-frame-color")
const contain = Markup.property("contain")
const containIntrinsicBlockSize = Markup.property("contain-intrinsic-block-size")
const containIntrinsicHeight = Markup.property("contain-intrinsic-height")
const containIntrinsicInlineSize = Markup.property("contain-intrinsic-inline-size")
const containIntrinsicSize = Markup.property("contain-intrinsic-size")
const containIntrinsicWidth = Markup.property("contain-intrinsic-width")
const container = Markup.property("container")
const containerName = Markup.property("container-name")
const containerType = Markup.property("container-type")
const content = Markup.property("content")
const contentVisibility = Markup.property("content-visibility")
const msContentZoomChaining = Markup.property("-ms-content-zoom-chaining")
const msContentZoomLimitMax = Markup.property("-ms-content-zoom-limit-max")
const msContentZoomLimitMin = Markup.property("-ms-content-zoom-limit-min")
const msContentZoomLimit = Markup.property("-ms-content-zoom-limit")
const msContentZoomSnap = Markup.property("-ms-content-zoom-snap")
const msContentZoomSnapPoints = Markup.property("-ms-content-zoom-snap-points")
const msContentZoomSnapType = Markup.property("-ms-content-zoom-snap-type")
const msContentZooming = Markup.property("-ms-content-zooming")
const _continue = Markup.property("continue")
const counterIncrement = Markup.property("counter-increment")
const counterReset = Markup.property("counter-reset")
const counterSet = Markup.property("counter-set")
const cue = Markup.property("cue")
const cueAfter = Markup.property("cue-after")
const cueBefore = Markup.property("cue-before")
const cursor = Markup.property("cursor")
const webkitCursorVisibility = Markup.property("-webkit-cursor-visibility")
const cx = Markup.property("cx")
const cy = Markup.property("cy")
const d = Markup.property("d")
const appleDashboardRegion = Markup.property("-apple-dashboard-region")
const webkitDashboardRegion = Markup.property("-webkit-dashboard-region")
const descentOverride = Markup.property("descent-override")
const direction = Markup.property("direction")
const display = Markup.property("display")
const displayAlign = Markup.property("display-align")
const dominantBaseline = Markup.property("dominant-baseline")
const elevation = Markup.property("elevation")
const emptyCells = Markup.property("empty-cells")
const enableBackground = Markup.property("enable-background")
const epubCaptionSide = Markup.property("epub-caption-side")
const epubHyphens = Markup.property("epub-hyphens")
const epubTextCombine = Markup.property("epub-text-combine")
const epubTextEmphasis = Markup.property("epub-text-emphasis")
const epubTextEmphasisColor = Markup.property("epub-text-emphasis-color")
const epubTextEmphasisStyle = Markup.property("epub-text-emphasis-style")
const epubTextOrientation = Markup.property("epub-text-orientation")
const epubTextTransform = Markup.property("epub-text-transform")
const epubWordBreak = Markup.property("epub-word-break")
const epubWritingMode = Markup.property("epub-writing-mode")
const fallback = Markup.property("fallback")
const fill = Markup.property("fill")
const fillBreak = Markup.property("fill-break")
const fillColor = Markup.property("fill-color")
const fillImage = Markup.property("fill-image")
const fillOpacity = Markup.property("fill-opacity")
const fillOrigin = Markup.property("fill-origin")
const fillPosition = Markup.property("fill-position")
const fillRepeat = Markup.property("fill-repeat")
const fillRule = Markup.property("fill-rule")
const fillSize = Markup.property("fill-size")
const filter = Markup.property("filter")
const msFilter = Markup.property("-ms-filter")
const webkitFilter = Markup.property("-webkit-filter")
const flex = Markup.property("flex")
const msFlexAlign = Markup.property("-ms-flex-align")
const webkitFlexAlign = Markup.property("-webkit-flex-align")
const flexBasis = Markup.property("flex-basis")
const webkitFlexBasis = Markup.property("-webkit-flex-basis")
const flexDirection = Markup.property("flex-direction")
const msFlexDirection = Markup.property("-ms-flex-direction")
const webkitFlexDirection = Markup.property("-webkit-flex-direction")
const flexFlow = Markup.property("flex-flow")
const msFlexFlow = Markup.property("-ms-flex-flow")
const webkitFlexFlow = Markup.property("-webkit-flex-flow")
const flexGrow = Markup.property("flex-grow")
const webkitFlexGrow = Markup.property("-webkit-flex-grow")
const msFlexItemAlign = Markup.property("-ms-flex-item-align")
const webkitFlexItemAlign = Markup.property("-webkit-flex-item-align")
const msFlexLinePack = Markup.property("-ms-flex-line-pack")
const webkitFlexLinePack = Markup.property("-webkit-flex-line-pack")
const msFlex = Markup.property("-ms-flex")
const msFlexNegative = Markup.property("-ms-flex-negative")
const msFlexOrder = Markup.property("-ms-flex-order")
const webkitFlexOrder = Markup.property("-webkit-flex-order")
const msFlexPack = Markup.property("-ms-flex-pack")
const webkitFlexPack = Markup.property("-webkit-flex-pack")
const msFlexPositive = Markup.property("-ms-flex-positive")
const msFlexPreferredSize = Markup.property("-ms-flex-preferred-size")
const flexShrink = Markup.property("flex-shrink")
const webkitFlexShrink = Markup.property("-webkit-flex-shrink")
const webkitFlex = Markup.property("-webkit-flex")
const flexWrap = Markup.property("flex-wrap")
const msFlexWrap = Markup.property("-ms-flex-wrap")
const webkitFlexWrap = Markup.property("-webkit-flex-wrap")
const float = Markup.property("float")
const floatDefer = Markup.property("float-defer")
const mozFloatEdge = Markup.property("-moz-float-edge")
const floatOffset = Markup.property("float-offset")
const floatReference = Markup.property("float-reference")
const floodColor = Markup.property("flood-color")
const floodOpacity = Markup.property("flood-opacity")
const flow = Markup.property("flow")
const flowFrom = Markup.property("flow-from")
const msFlowFrom = Markup.property("-ms-flow-from")
const webkitFlowFrom = Markup.property("-webkit-flow-from")
const flowInto = Markup.property("flow-into")
const msFlowInto = Markup.property("-ms-flow-into")
const webkitFlowInto = Markup.property("-webkit-flow-into")
const font = Markup.property("font")
const fontDisplay = Markup.property("font-display")
const fontFamily = Markup.property("font-family")
const fontFeatureSettings = Markup.property("font-feature-settings")
const mozFontFeatureSettings = Markup.property("-moz-font-feature-settings")
const msFontFeatureSettings = Markup.property("-ms-font-feature-settings")
const webkitFontFeatureSettings = Markup.property("-webkit-font-feature-settings")
const fontKerning = Markup.property("font-kerning")
const webkitFontKerning = Markup.property("-webkit-font-kerning")
const fontLanguageOverride = Markup.property("font-language-override")
const mozFontLanguageOverride = Markup.property("-moz-font-language-override")
const fontOpticalSizing = Markup.property("font-optical-sizing")
const fontPalette = Markup.property("font-palette")
const fontSize = Markup.property("font-size")
const fontSizeAdjust = Markup.property("font-size-adjust")
const webkitFontSizeDelta = Markup.property("-webkit-font-size-delta")
const webkitFontSmoothing = Markup.property("-webkit-font-smoothing")
const fontStretch = Markup.property("font-stretch")
const fontStyle = Markup.property("font-style")
const fontSynthesis = Markup.property("font-synthesis")
const fontSynthesisSmallCaps = Markup.property("font-synthesis-small-caps")
const fontSynthesisStyle = Markup.property("font-synthesis-style")
const fontSynthesisWeight = Markup.property("font-synthesis-weight")
const fontVariant = Markup.property("font-variant")
const fontVariantAlternates = Markup.property("font-variant-alternates")
const fontVariantCaps = Markup.property("font-variant-caps")
const fontVariantEastAsian = Markup.property("font-variant-east-asian")
const fontVariantEmoji = Markup.property("font-variant-emoji")
const fontVariantLigatures = Markup.property("font-variant-ligatures")
const webkitFontVariantLigatures = Markup.property("-webkit-font-variant-ligatures")
const fontVariantNumeric = Markup.property("font-variant-numeric")
const fontVariantPosition = Markup.property("font-variant-position")
const fontVariationSettings = Markup.property("font-variation-settings")
const fontWeight = Markup.property("font-weight")
const footnoteDisplay = Markup.property("footnote-display")
const footnotePolicy = Markup.property("footnote-policy")
const mozForceBrokenImageIcon = Markup.property("-moz-force-broken-image-icon")
const forcedColorAdjust = Markup.property("forced-color-adjust")
const gap = Markup.property("gap")
const glyphOrientationHorizontal = Markup.property("glyph-orientation-horizontal")
const glyphOrientationVertical = Markup.property("glyph-orientation-vertical")
const grid = Markup.property("grid")
const webkitGridAfter = Markup.property("-webkit-grid-after")
const gridArea = Markup.property("grid-area")
const gridAutoColumns = Markup.property("grid-auto-columns")
const webkitGridAutoColumns = Markup.property("-webkit-grid-auto-columns")
const gridAutoFlow = Markup.property("grid-auto-flow")
const webkitGridAutoFlow = Markup.property("-webkit-grid-auto-flow")
const gridAutoRows = Markup.property("grid-auto-rows")
const webkitGridAutoRows = Markup.property("-webkit-grid-auto-rows")
const webkitGridBefore = Markup.property("-webkit-grid-before")
const gridColumn = Markup.property("grid-column")
const msGridColumnAlign = Markup.property("-ms-grid-column-align")
const gridColumnEnd = Markup.property("grid-column-end")
const gridColumnGap = Markup.property("grid-column-gap")
const msGridColumn = Markup.property("-ms-grid-column")
const msGridColumnSpan = Markup.property("-ms-grid-column-span")
const gridColumnStart = Markup.property("grid-column-start")
const webkitGridColumn = Markup.property("-webkit-grid-column")
const msGridColumns = Markup.property("-ms-grid-columns")
const webkitGridColumns = Markup.property("-webkit-grid-columns")
const webkitGridEnd = Markup.property("-webkit-grid-end")
const gridGap = Markup.property("grid-gap")
const gridRow = Markup.property("grid-row")
const msGridRowAlign = Markup.property("-ms-grid-row-align")
const gridRowEnd = Markup.property("grid-row-end")
const gridRowGap = Markup.property("grid-row-gap")
const msGridRow = Markup.property("-ms-grid-row")
const msGridRowSpan = Markup.property("-ms-grid-row-span")
const gridRowStart = Markup.property("grid-row-start")
const webkitGridRow = Markup.property("-webkit-grid-row")
const msGridRows = Markup.property("-ms-grid-rows")
const webkitGridRows = Markup.property("-webkit-grid-rows")
const webkitGridStart = Markup.property("-webkit-grid-start")
const gridTemplate = Markup.property("grid-template")
const gridTemplateAreas = Markup.property("grid-template-areas")
const gridTemplateColumns = Markup.property("grid-template-columns")
const gridTemplateRows = Markup.property("grid-template-rows")
const hangingPunctuation = Markup.property("hanging-punctuation")
const height = Markup.property("height")
const msHighContrastAdjust = Markup.property("-ms-high-contrast-adjust")
const webkitHighlight = Markup.property("-webkit-highlight")
const hyphenateCharacter = Markup.property("hyphenate-character")
const webkitHyphenateCharacter = Markup.property("-webkit-hyphenate-character")
const webkitHyphenateLimitAfter = Markup.property("-webkit-hyphenate-limit-after")
const webkitHyphenateLimitBefore = Markup.property("-webkit-hyphenate-limit-before")
const hyphenateLimitChars = Markup.property("hyphenate-limit-chars")
const msHyphenateLimitChars = Markup.property("-ms-hyphenate-limit-chars")
const hyphenateLimitLast = Markup.property("hyphenate-limit-last")
const hyphenateLimitLines = Markup.property("hyphenate-limit-lines")
const msHyphenateLimitLines = Markup.property("-ms-hyphenate-limit-lines")
const webkitHyphenateLimitLines = Markup.property("-webkit-hyphenate-limit-lines")
const hyphenateLimitZone = Markup.property("hyphenate-limit-zone")
const msHyphenateLimitZone = Markup.property("-ms-hyphenate-limit-zone")
const hyphens = Markup.property("hyphens")
const mozHyphens = Markup.property("-moz-hyphens")
const msHyphens = Markup.property("-ms-hyphens")
const webkitHyphens = Markup.property("-webkit-hyphens")
const imageOrientation = Markup.property("image-orientation")
const mozImageRegion = Markup.property("-moz-image-region")
const imageRendering = Markup.property("image-rendering")
const imageResolution = Markup.property("image-resolution")
const msImeAlign = Markup.property("-ms-ime-align")
const imeMode = Markup.property("ime-mode")
const inherits = Markup.property("inherits")
const initialLetter = Markup.property("initial-letter")
const initialLetterAlign = Markup.property("initial-letter-align")
const webkitInitialLetter = Markup.property("-webkit-initial-letter")
const initialLetterWrap = Markup.property("initial-letter-wrap")
const initialValue = Markup.property("initial-value")
const inlineSize = Markup.property("inline-size")
const inlineSizing = Markup.property("inline-sizing")
const inputFormat = Markup.property("input-format")
const wapInputFormat = Markup.property("-wap-input-format")
const wapInputRequired = Markup.property("-wap-input-required")
const inputSecurity = Markup.property("input-security")
const inset = Markup.property("inset")
const insetBlock = Markup.property("inset-block")
const insetBlockEnd = Markup.property("inset-block-end")
const insetBlockStart = Markup.property("inset-block-start")
const insetInline = Markup.property("inset-inline")
const insetInlineEnd = Markup.property("inset-inline-end")
const insetInlineStart = Markup.property("inset-inline-start")
const msInterpolationMode = Markup.property("-ms-interpolation-mode")
const isolation = Markup.property("isolation")
const justifyContent = Markup.property("justify-content")
const webkitJustifyContent = Markup.property("-webkit-justify-content")
const justifyItems = Markup.property("justify-items")
const webkitJustifyItems = Markup.property("-webkit-justify-items")
const justifySelf = Markup.property("justify-self")
const webkitJustifySelf = Markup.property("-webkit-justify-self")
const kerning = Markup.property("kerning")
const layoutFlow = Markup.property("layout-flow")
const layoutGrid = Markup.property("layout-grid")
const layoutGridChar = Markup.property("layout-grid-char")
const layoutGridLine = Markup.property("layout-grid-line")
const layoutGridMode = Markup.property("layout-grid-mode")
const layoutGridType = Markup.property("layout-grid-type")
const leadingTrim = Markup.property("leading-trim")
const left = Markup.property("left")
const letterSpacing = Markup.property("letter-spacing")
const lightingColor = Markup.property("lighting-color")
const webkitLineAlign = Markup.property("-webkit-line-align")
const webkitLineBoxContain = Markup.property("-webkit-line-box-contain")
const lineBreak = Markup.property("line-break")
const webkitLineBreak = Markup.property("-webkit-line-break")
const lineClamp = Markup.property("line-clamp")
const webkitLineClamp = Markup.property("-webkit-line-clamp")
const lineGapOverride = Markup.property("line-gap-override")
const lineGrid = Markup.property("line-grid")
const webkitLineGridSnap = Markup.property("-webkit-line-grid-snap")
const webkitLineGrid = Markup.property("-webkit-line-grid")
const lineHeight = Markup.property("line-height")
const lineHeightStep = Markup.property("line-height-step")
const lineIncrement = Markup.property("line-increment")
const linePadding = Markup.property("line-padding")
const lineSnap = Markup.property("line-snap")
const webkitLineSnap = Markup.property("-webkit-line-snap")
const oLink = Markup.property("-o-link")
const oLinkSource = Markup.property("-o-link-source")
const listStyle = Markup.property("list-style")
const listStyleImage = Markup.property("list-style-image")
const listStylePosition = Markup.property("list-style-position")
const listStyleType = Markup.property("list-style-type")
const webkitLocale = Markup.property("-webkit-locale")
const webkitLogicalHeight = Markup.property("-webkit-logical-height")
const webkitLogicalWidth = Markup.property("-webkit-logical-width")
const margin = Markup.property("margin")
const webkitMarginAfterCollapse = Markup.property("-webkit-margin-after-collapse")
const webkitMarginAfter = Markup.property("-webkit-margin-after")
const webkitMarginBeforeCollapse = Markup.property("-webkit-margin-before-collapse")
const webkitMarginBefore = Markup.property("-webkit-margin-before")
const marginBlock = Markup.property("margin-block")
const marginBlockEnd = Markup.property("margin-block-end")
const marginBlockStart = Markup.property("margin-block-start")
const marginBottom = Markup.property("margin-bottom")
const webkitMarginBottomCollapse = Markup.property("-webkit-margin-bottom-collapse")
const marginBreak = Markup.property("margin-break")
const webkitMarginCollapse = Markup.property("-webkit-margin-collapse")
const mozMarginEnd = Markup.property("-moz-margin-end")
const webkitMarginEnd = Markup.property("-webkit-margin-end")
const marginInline = Markup.property("margin-inline")
const marginInlineEnd = Markup.property("margin-inline-end")
const marginInlineStart = Markup.property("margin-inline-start")
const marginLeft = Markup.property("margin-left")
const marginRight = Markup.property("margin-right")
const mozMarginStart = Markup.property("-moz-margin-start")
const webkitMarginStart = Markup.property("-webkit-margin-start")
const marginTop = Markup.property("margin-top")
const webkitMarginTopCollapse = Markup.property("-webkit-margin-top-collapse")
const marginTrim = Markup.property("margin-trim")
const marker = Markup.property("marker")
const markerEnd = Markup.property("marker-end")
const markerKnockoutLeft = Markup.property("marker-knockout-left")
const markerKnockoutRight = Markup.property("marker-knockout-right")
const markerMid = Markup.property("marker-mid")
const markerOffset = Markup.property("marker-offset")
const markerPattern = Markup.property("marker-pattern")
const markerSegment = Markup.property("marker-segment")
const markerSide = Markup.property("marker-side")
const markerStart = Markup.property("marker-start")
const marks = Markup.property("marks")
const wapMarqueeDir = Markup.property("-wap-marquee-dir")
const webkitMarqueeDirection = Markup.property("-webkit-marquee-direction")
const webkitMarqueeIncrement = Markup.property("-webkit-marquee-increment")
const wapMarqueeLoop = Markup.property("-wap-marquee-loop")
const webkitMarqueeRepetition = Markup.property("-webkit-marquee-repetition")
const wapMarqueeSpeed = Markup.property("-wap-marquee-speed")
const webkitMarqueeSpeed = Markup.property("-webkit-marquee-speed")
const wapMarqueeStyle = Markup.property("-wap-marquee-style")
const webkitMarqueeStyle = Markup.property("-webkit-marquee-style")
const webkitMarquee = Markup.property("-webkit-marquee")
const mask = Markup.property("mask")
const webkitMaskAttachment = Markup.property("-webkit-mask-attachment")
const maskBorder = Markup.property("mask-border")
const maskBorderMode = Markup.property("mask-border-mode")
const maskBorderOutset = Markup.property("mask-border-outset")
const maskBorderRepeat = Markup.property("mask-border-repeat")
const maskBorderSlice = Markup.property("mask-border-slice")
const maskBorderSource = Markup.property("mask-border-source")
const maskBorderWidth = Markup.property("mask-border-width")
const webkitMaskBoxImageOutset = Markup.property("-webkit-mask-box-image-outset")
const webkitMaskBoxImageRepeat = Markup.property("-webkit-mask-box-image-repeat")
const webkitMaskBoxImageSlice = Markup.property("-webkit-mask-box-image-slice")
const webkitMaskBoxImageSource = Markup.property("-webkit-mask-box-image-source")
const webkitMaskBoxImage = Markup.property("-webkit-mask-box-image")
const webkitMaskBoxImageWidth = Markup.property("-webkit-mask-box-image-width")
const maskClip = Markup.property("mask-clip")
const webkitMaskClip = Markup.property("-webkit-mask-clip")
const maskComposite = Markup.property("mask-composite")
const webkitMaskComposite = Markup.property("-webkit-mask-composite")
const maskImage = Markup.property("mask-image")
const webkitMaskImage = Markup.property("-webkit-mask-image")
const maskMode = Markup.property("mask-mode")
const maskOrigin = Markup.property("mask-origin")
const webkitMaskOrigin = Markup.property("-webkit-mask-origin")
const maskPosition = Markup.property("mask-position")
const webkitMaskPosition = Markup.property("-webkit-mask-position")
const maskPositionX = Markup.property("mask-position-x")
const webkitMaskPositionX = Markup.property("-webkit-mask-position-x")
const maskPositionY = Markup.property("mask-position-y")
const webkitMaskPositionY = Markup.property("-webkit-mask-position-y")
const maskRepeat = Markup.property("mask-repeat")
const webkitMaskRepeat = Markup.property("-webkit-mask-repeat")
const webkitMaskRepeatX = Markup.property("-webkit-mask-repeat-x")
const webkitMaskRepeatY = Markup.property("-webkit-mask-repeat-y")
const maskSize = Markup.property("mask-size")
const webkitMaskSize = Markup.property("-webkit-mask-size")
const maskSourceType = Markup.property("mask-source-type")
const webkitMaskSourceType = Markup.property("-webkit-mask-source-type")
const maskType = Markup.property("mask-type")
const webkitMask = Markup.property("-webkit-mask")
const webkitMatchNearestMailBlockquoteColor = Markup.property("-webkit-match-nearest-mail-blockquote-color")
const mathStyle = Markup.property("math-style")
const maxBlockSize = Markup.property("max-block-size")
const maxHeight = Markup.property("max-height")
const maxInlineSize = Markup.property("max-inline-size")
const maxLines = Markup.property("max-lines")
const webkitMaxLogicalHeight = Markup.property("-webkit-max-logical-height")
const webkitMaxLogicalWidth = Markup.property("-webkit-max-logical-width")
const maxWidth = Markup.property("max-width")
const maxZoom = Markup.property("max-zoom")
const minBlockSize = Markup.property("min-block-size")
const minHeight = Markup.property("min-height")
const minInlineSize = Markup.property("min-inline-size")
const minIntrinsicSizing = Markup.property("min-intrinsic-sizing")
const webkitMinLogicalHeight = Markup.property("-webkit-min-logical-height")
const webkitMinLogicalWidth = Markup.property("-webkit-min-logical-width")
const minWidth = Markup.property("min-width")
const minZoom = Markup.property("min-zoom")
const mixBlendMode = Markup.property("mix-blend-mode")
const motion = Markup.property("motion")
const motionOffset = Markup.property("motion-offset")
const motionPath = Markup.property("motion-path")
const motionRotation = Markup.property("motion-rotation")
const navDown = Markup.property("nav-down")
const navIndex = Markup.property("nav-index")
const navLeft = Markup.property("nav-left")
const navRight = Markup.property("nav-right")
const navUp = Markup.property("nav-up")
const webkitNbspMode = Markup.property("-webkit-nbsp-mode")
const negative = Markup.property("negative")
const objectFit = Markup.property("object-fit")
const oObjectFit = Markup.property("-o-object-fit")
const objectPosition = Markup.property("object-position")
const oObjectPosition = Markup.property("-o-object-position")
const objectViewBox = Markup.property("object-view-box")
const offset = Markup.property("offset")
const offsetAnchor = Markup.property("offset-anchor")
const offsetBlockEnd = Markup.property("offset-block-end")
const offsetBlockStart = Markup.property("offset-block-start")
const offsetDistance = Markup.property("offset-distance")
const offsetInlineEnd = Markup.property("offset-inline-end")
const offsetInlineStart = Markup.property("offset-inline-start")
const offsetPath = Markup.property("offset-path")
const offsetPosition = Markup.property("offset-position")
const offsetRotate = Markup.property("offset-rotate")
const offsetRotation = Markup.property("offset-rotation")
const opacity = Markup.property("opacity")
const mozOpacity = Markup.property("-moz-opacity")
const webkitOpacity = Markup.property("-webkit-opacity")
const order = Markup.property("order")
const webkitOrder = Markup.property("-webkit-order")
const mozOrient = Markup.property("-moz-orient")
const orientation = Markup.property("orientation")
const orphans = Markup.property("orphans")
const mozOsxFontSmoothing = Markup.property("-moz-osx-font-smoothing")
const outline = Markup.property("outline")
const outlineColor = Markup.property("outline-color")
const mozOutlineColor = Markup.property("-moz-outline-color")
const mozOutline = Markup.property("-moz-outline")
const outlineOffset = Markup.property("outline-offset")
const mozOutlineOffset = Markup.property("-moz-outline-offset")
const mozOutlineRadiusBottomleft = Markup.property("-moz-outline-radius-bottomleft")
const mozOutlineRadiusBottomright = Markup.property("-moz-outline-radius-bottomright")
const mozOutlineRadius = Markup.property("-moz-outline-radius")
const mozOutlineRadiusTopleft = Markup.property("-moz-outline-radius-topleft")
const mozOutlineRadiusTopright = Markup.property("-moz-outline-radius-topright")
const outlineStyle = Markup.property("outline-style")
const mozOutlineStyle = Markup.property("-moz-outline-style")
const outlineWidth = Markup.property("outline-width")
const mozOutlineWidth = Markup.property("-moz-outline-width")
const overflow = Markup.property("overflow")
const overflowAnchor = Markup.property("overflow-anchor")
const overflowBlock = Markup.property("overflow-block")
const overflowClipMargin = Markup.property("overflow-clip-margin")
const overflowInline = Markup.property("overflow-inline")
const webkitOverflowScrolling = Markup.property("-webkit-overflow-scrolling")
const msOverflowStyle = Markup.property("-ms-overflow-style")
const overflowWrap = Markup.property("overflow-wrap")
const overflowX = Markup.property("overflow-x")
const overflowY = Markup.property("overflow-y")
const overrideColors = Markup.property("override-colors")
const overscrollBehavior = Markup.property("overscroll-behavior")
const overscrollBehaviorBlock = Markup.property("overscroll-behavior-block")
const overscrollBehaviorInline = Markup.property("overscroll-behavior-inline")
const overscrollBehaviorX = Markup.property("overscroll-behavior-x")
const overscrollBehaviorY = Markup.property("overscroll-behavior-y")
const pad = Markup.property("pad")
const padding = Markup.property("padding")
const webkitPaddingAfter = Markup.property("-webkit-padding-after")
const webkitPaddingBefore = Markup.property("-webkit-padding-before")
const paddingBlock = Markup.property("padding-block")
const paddingBlockEnd = Markup.property("padding-block-end")
const paddingBlockStart = Markup.property("padding-block-start")
const paddingBottom = Markup.property("padding-bottom")
const mozPaddingEnd = Markup.property("-moz-padding-end")
const webkitPaddingEnd = Markup.property("-webkit-padding-end")
const paddingInline = Markup.property("padding-inline")
const paddingInlineEnd = Markup.property("padding-inline-end")
const paddingInlineStart = Markup.property("padding-inline-start")
const paddingLeft = Markup.property("padding-left")
const paddingRight = Markup.property("padding-right")
const mozPaddingStart = Markup.property("-moz-padding-start")
const webkitPaddingStart = Markup.property("-webkit-padding-start")
const paddingTop = Markup.property("padding-top")
const page = Markup.property("page")
const pageBreakAfter = Markup.property("page-break-after")
const pageBreakBefore = Markup.property("page-break-before")
const pageBreakInside = Markup.property("page-break-inside")
const pageOrientation = Markup.property("page-orientation")
const pageTransitionTag = Markup.property("page-transition-tag")
const paintOrder = Markup.property("paint-order")
const pause = Markup.property("pause")
const pauseAfter = Markup.property("pause-after")
const pauseBefore = Markup.property("pause-before")
const applePayButtonStyle = Markup.property("-apple-pay-button-style")
const applePayButtonType = Markup.property("-apple-pay-button-type")
const penAction = Markup.property("pen-action")
const perspective = Markup.property("perspective")
const mozPerspective = Markup.property("-moz-perspective")
const msPerspective = Markup.property("-ms-perspective")
const perspectiveOrigin = Markup.property("perspective-origin")
const mozPerspectiveOrigin = Markup.property("-moz-perspective-origin")
const msPerspectiveOrigin = Markup.property("-ms-perspective-origin")
const webkitPerspectiveOrigin = Markup.property("-webkit-perspective-origin")
const perspectiveOriginX = Markup.property("perspective-origin-x")
const webkitPerspectiveOriginX = Markup.property("-webkit-perspective-origin-x")
const perspectiveOriginY = Markup.property("perspective-origin-y")
const webkitPerspectiveOriginY = Markup.property("-webkit-perspective-origin-y")
const webkitPerspective = Markup.property("-webkit-perspective")
const pitch = Markup.property("pitch")
const pitchRange = Markup.property("pitch-range")
const placeContent = Markup.property("place-content")
const placeItems = Markup.property("place-items")
const placeSelf = Markup.property("place-self")
const playDuring = Markup.property("play-during")
const pointerEvents = Markup.property("pointer-events")
const position = Markup.property("position")
const prefix = Markup.property("prefix")
const printColorAdjust = Markup.property("print-color-adjust")
const webkitPrintColorAdjust = Markup.property("-webkit-print-color-adjust")
const propertyName = Markup.property("property-name")
const quotes = Markup.property("quotes")
const r = Markup.property("r")
const range = Markup.property("range")
const webkitRegionBreakAfter = Markup.property("-webkit-region-break-after")
const webkitRegionBreakBefore = Markup.property("-webkit-region-break-before")
const webkitRegionBreakInside = Markup.property("-webkit-region-break-inside")
const regionFragment = Markup.property("region-fragment")
const webkitRegionFragment = Markup.property("-webkit-region-fragment")
const webkitRegionOverflow = Markup.property("-webkit-region-overflow")
const resize = Markup.property("resize")
const rest = Markup.property("rest")
const restAfter = Markup.property("rest-after")
const restBefore = Markup.property("rest-before")
const richness = Markup.property("richness")
const right = Markup.property("right")
const rotate = Markup.property("rotate")
const rowGap = Markup.property("row-gap")
const webkitRtlOrdering = Markup.property("-webkit-rtl-ordering")
const rubyAlign = Markup.property("ruby-align")
const rubyMerge = Markup.property("ruby-merge")
const rubyOverhang = Markup.property("ruby-overhang")
const rubyPosition = Markup.property("ruby-position")
const webkitRubyPosition = Markup.property("-webkit-ruby-position")
const running = Markup.property("running")
const rx = Markup.property("rx")
const ry = Markup.property("ry")
const scale = Markup.property("scale")
const scrollBehavior = Markup.property("scroll-behavior")
const msScrollChaining = Markup.property("-ms-scroll-chaining")
const msScrollLimit = Markup.property("-ms-scroll-limit")
const msScrollLimitXMax = Markup.property("-ms-scroll-limit-x-max")
const msScrollLimitXMin = Markup.property("-ms-scroll-limit-x-min")
const msScrollLimitYMax = Markup.property("-ms-scroll-limit-y-max")
const msScrollLimitYMin = Markup.property("-ms-scroll-limit-y-min")
const scrollMargin = Markup.property("scroll-margin")
const scrollMarginBlock = Markup.property("scroll-margin-block")
const scrollMarginBlockEnd = Markup.property("scroll-margin-block-end")
const scrollMarginBlockStart = Markup.property("scroll-margin-block-start")
const scrollMarginBottom = Markup.property("scroll-margin-bottom")
const scrollMarginInline = Markup.property("scroll-margin-inline")
const scrollMarginInlineEnd = Markup.property("scroll-margin-inline-end")
const scrollMarginInlineStart = Markup.property("scroll-margin-inline-start")
const scrollMarginLeft = Markup.property("scroll-margin-left")
const scrollMarginRight = Markup.property("scroll-margin-right")
const scrollMarginTop = Markup.property("scroll-margin-top")
const scrollPadding = Markup.property("scroll-padding")
const scrollPaddingBlock = Markup.property("scroll-padding-block")
const scrollPaddingBlockEnd = Markup.property("scroll-padding-block-end")
const scrollPaddingBlockStart = Markup.property("scroll-padding-block-start")
const scrollPaddingBottom = Markup.property("scroll-padding-bottom")
const scrollPaddingInline = Markup.property("scroll-padding-inline")
const scrollPaddingInlineEnd = Markup.property("scroll-padding-inline-end")
const scrollPaddingInlineStart = Markup.property("scroll-padding-inline-start")
const scrollPaddingLeft = Markup.property("scroll-padding-left")
const scrollPaddingRight = Markup.property("scroll-padding-right")
const scrollPaddingTop = Markup.property("scroll-padding-top")
const msScrollRails = Markup.property("-ms-scroll-rails")
const scrollSnapAlign = Markup.property("scroll-snap-align")
const scrollSnapCoordinate = Markup.property("scroll-snap-coordinate")
const webkitScrollSnapCoordinate = Markup.property("-webkit-scroll-snap-coordinate")
const scrollSnapDestination = Markup.property("scroll-snap-destination")
const webkitScrollSnapDestination = Markup.property("-webkit-scroll-snap-destination")
const scrollSnapMargin = Markup.property("scroll-snap-margin")
const scrollSnapMarginBottom = Markup.property("scroll-snap-margin-bottom")
const scrollSnapMarginLeft = Markup.property("scroll-snap-margin-left")
const scrollSnapMarginRight = Markup.property("scroll-snap-margin-right")
const scrollSnapMarginTop = Markup.property("scroll-snap-margin-top")
const scrollSnapPointsX = Markup.property("scroll-snap-points-x")
const msScrollSnapPointsX = Markup.property("-ms-scroll-snap-points-x")
const webkitScrollSnapPointsX = Markup.property("-webkit-scroll-snap-points-x")
const scrollSnapPointsY = Markup.property("scroll-snap-points-y")
const msScrollSnapPointsY = Markup.property("-ms-scroll-snap-points-y")
const webkitScrollSnapPointsY = Markup.property("-webkit-scroll-snap-points-y")
const scrollSnapStop = Markup.property("scroll-snap-stop")
const scrollSnapType = Markup.property("scroll-snap-type")
const msScrollSnapType = Markup.property("-ms-scroll-snap-type")
const webkitScrollSnapType = Markup.property("-webkit-scroll-snap-type")
const scrollSnapTypeX = Markup.property("scroll-snap-type-x")
const scrollSnapTypeY = Markup.property("scroll-snap-type-y")
const msScrollSnapX = Markup.property("-ms-scroll-snap-x")
const msScrollSnapY = Markup.property("-ms-scroll-snap-y")
const scrollTimeline = Markup.property("scroll-timeline")
const scrollTimelineAxis = Markup.property("scroll-timeline-axis")
const scrollTimelineName = Markup.property("scroll-timeline-name")
const msScrollTranslation = Markup.property("-ms-scroll-translation")
const scrollbarArrowColor = Markup.property("scrollbar-arrow-color")
const scrollbarBaseColor = Markup.property("scrollbar-base-color")
const scrollbarColor = Markup.property("scrollbar-color")
const scrollbarDarkShadowColor = Markup.property("scrollbar-dark-shadow-color")
const scrollbarDarkshadowColor = Markup.property("scrollbar-darkshadow-color")
const scrollbarFaceColor = Markup.property("scrollbar-face-color")
const scrollbarGutter = Markup.property("scrollbar-gutter")
const scrollbarHighlightColor = Markup.property("scrollbar-highlight-color")
const scrollbarShadowColor = Markup.property("scrollbar-shadow-color")
const scrollbarTrackColor = Markup.property("scrollbar-track-color")
const scrollbarWidth = Markup.property("scrollbar-width")
const scrollbar3dLightColor = Markup.property("scrollbar3d-light-color")
const scrollbar3dlightColor = Markup.property("scrollbar3dlight-color")
const shapeImageThreshold = Markup.property("shape-image-threshold")
const webkitShapeImageThreshold = Markup.property("-webkit-shape-image-threshold")
const shapeInside = Markup.property("shape-inside")
const webkitShapeInside = Markup.property("-webkit-shape-inside")
const shapeMargin = Markup.property("shape-margin")
const webkitShapeMargin = Markup.property("-webkit-shape-margin")
const shapeOutside = Markup.property("shape-outside")
const webkitShapeOutside = Markup.property("-webkit-shape-outside")
const webkitShapePadding = Markup.property("-webkit-shape-padding")
const shapeRendering = Markup.property("shape-rendering")
const size = Markup.property("size")
const sizeAdjust = Markup.property("size-adjust")
const snapHeight = Markup.property("snap-height")
const solidColor = Markup.property("solid-color")
const solidOpacity = Markup.property("solid-opacity")
const spatialNavigationAction = Markup.property("spatial-navigation-action")
const spatialNavigationContain = Markup.property("spatial-navigation-contain")
const spatialNavigationFunction = Markup.property("spatial-navigation-function")
const speak = Markup.property("speak")
const speakAs = Markup.property("speak-as")
const speakHeader = Markup.property("speak-header")
const speakNumeral = Markup.property("speak-numeral")
const speakPunctuation = Markup.property("speak-punctuation")
const speechRate = Markup.property("speech-rate")
const src = Markup.property("src")
const mozStackSizing = Markup.property("-moz-stack-sizing")
const stopColor = Markup.property("stop-color")
const stopOpacity = Markup.property("stop-opacity")
const stress = Markup.property("stress")
const stringSet = Markup.property("string-set")
const stroke = Markup.property("stroke")
const strokeAlign = Markup.property("stroke-align")
const strokeAlignment = Markup.property("stroke-alignment")
const strokeBreak = Markup.property("stroke-break")
const strokeColor = Markup.property("stroke-color")
const strokeDashCorner = Markup.property("stroke-dash-corner")
const strokeDashJustify = Markup.property("stroke-dash-justify")
const strokeDashadjust = Markup.property("stroke-dashadjust")
const strokeDasharray = Markup.property("stroke-dasharray")
const strokeDashcorner = Markup.property("stroke-dashcorner")
const strokeDashoffset = Markup.property("stroke-dashoffset")
const strokeImage = Markup.property("stroke-image")
const strokeLinecap = Markup.property("stroke-linecap")
const strokeLinejoin = Markup.property("stroke-linejoin")
const strokeMiterlimit = Markup.property("stroke-miterlimit")
const strokeOpacity = Markup.property("stroke-opacity")
const strokeOrigin = Markup.property("stroke-origin")
const strokePosition = Markup.property("stroke-position")
const strokeRepeat = Markup.property("stroke-repeat")
const strokeSize = Markup.property("stroke-size")
const strokeWidth = Markup.property("stroke-width")
const suffix = Markup.property("suffix")
const supportedColorSchemes = Markup.property("supported-color-schemes")
const webkitSvgShadow = Markup.property("-webkit-svg-shadow")
const symbols = Markup.property("symbols")
const syntax = Markup.property("syntax")
const system = Markup.property("system")
const tabSize = Markup.property("tab-size")
const mozTabSize = Markup.property("-moz-tab-size")
const oTabSize = Markup.property("-o-tab-size")
const oTableBaseline = Markup.property("-o-table-baseline")
const tableLayout = Markup.property("table-layout")
const webkitTapHighlightColor = Markup.property("-webkit-tap-highlight-color")
const textAlign = Markup.property("text-align")
const textAlignAll = Markup.property("text-align-all")
const textAlignLast = Markup.property("text-align-last")
const mozTextAlignLast = Markup.property("-moz-text-align-last")
const textAnchor = Markup.property("text-anchor")
const textAutospace = Markup.property("text-autospace")
const mozTextBlink = Markup.property("-moz-text-blink")
const msTextCombineHorizontal = Markup.property("-ms-text-combine-horizontal")
const textCombineUpright = Markup.property("text-combine-upright")
const webkitTextCombine = Markup.property("-webkit-text-combine")
const textDecoration = Markup.property("text-decoration")
const textDecorationBlink = Markup.property("text-decoration-blink")
const textDecorationColor = Markup.property("text-decoration-color")
const mozTextDecorationColor = Markup.property("-moz-text-decoration-color")
const webkitTextDecorationColor = Markup.property("-webkit-text-decoration-color")
const textDecorationLine = Markup.property("text-decoration-line")
const mozTextDecorationLine = Markup.property("-moz-text-decoration-line")
const textDecorationLineThrough = Markup.property("text-decoration-line-through")
const webkitTextDecorationLine = Markup.property("-webkit-text-decoration-line")
const textDecorationNone = Markup.property("text-decoration-none")
const textDecorationOverline = Markup.property("text-decoration-overline")
const textDecorationSkip = Markup.property("text-decoration-skip")
const textDecorationSkipBox = Markup.property("text-decoration-skip-box")
const textDecorationSkipInk = Markup.property("text-decoration-skip-ink")
const textDecorationSkipInset = Markup.property("text-decoration-skip-inset")
const textDecorationSkipSelf = Markup.property("text-decoration-skip-self")
const textDecorationSkipSpaces = Markup.property("text-decoration-skip-spaces")
const webkitTextDecorationSkip = Markup.property("-webkit-text-decoration-skip")
const textDecorationStyle = Markup.property("text-decoration-style")
const mozTextDecorationStyle = Markup.property("-moz-text-decoration-style")
const webkitTextDecorationStyle = Markup.property("-webkit-text-decoration-style")
const textDecorationThickness = Markup.property("text-decoration-thickness")
const textDecorationTrim = Markup.property("text-decoration-trim")
const textDecorationUnderline = Markup.property("text-decoration-underline")
const webkitTextDecoration = Markup.property("-webkit-text-decoration")
const webkitTextDecorationsInEffect = Markup.property("-webkit-text-decorations-in-effect")
const textEdge = Markup.property("text-edge")
const textEmphasis = Markup.property("text-emphasis")
const textEmphasisColor = Markup.property("text-emphasis-color")
const webkitTextEmphasisColor = Markup.property("-webkit-text-emphasis-color")
const textEmphasisPosition = Markup.property("text-emphasis-position")
const webkitTextEmphasisPosition = Markup.property("-webkit-text-emphasis-position")
const textEmphasisSkip = Markup.property("text-emphasis-skip")
const textEmphasisStyle = Markup.property("text-emphasis-style")
const webkitTextEmphasisStyle = Markup.property("-webkit-text-emphasis-style")
const webkitTextEmphasis = Markup.property("-webkit-text-emphasis")
const webkitTextFillColor = Markup.property("-webkit-text-fill-color")
const textGroupAlign = Markup.property("text-group-align")
const textIndent = Markup.property("text-indent")
const textJustify = Markup.property("text-justify")
const textJustifyTrim = Markup.property("text-justify-trim")
const textKashida = Markup.property("text-kashida")
const textKashidaSpace = Markup.property("text-kashida-space")
const textLineThrough = Markup.property("text-line-through")
const textLineThroughColor = Markup.property("text-line-through-color")
const textLineThroughMode = Markup.property("text-line-through-mode")
const textLineThroughStyle = Markup.property("text-line-through-style")
const textLineThroughWidth = Markup.property("text-line-through-width")
const textOrientation = Markup.property("text-orientation")
const webkitTextOrientation = Markup.property("-webkit-text-orientation")
const textOverflow = Markup.property("text-overflow")
const textOverline = Markup.property("text-overline")
const textOverlineColor = Markup.property("text-overline-color")
const textOverlineMode = Markup.property("text-overline-mode")
const textOverlineStyle = Markup.property("text-overline-style")
const textOverlineWidth = Markup.property("text-overline-width")
const textRendering = Markup.property("text-rendering")
const webkitTextSecurity = Markup.property("-webkit-text-security")
const textShadow = Markup.property("text-shadow")
const textSizeAdjust = Markup.property("text-size-adjust")
const mozTextSizeAdjust = Markup.property("-moz-text-size-adjust")
const msTextSizeAdjust = Markup.property("-ms-text-size-adjust")
const webkitTextSizeAdjust = Markup.property("-webkit-text-size-adjust")
const textSpaceCollapse = Markup.property("text-space-collapse")
const textSpaceTrim = Markup.property("text-space-trim")
const textSpacing = Markup.property("text-spacing")
const webkitTextStrokeColor = Markup.property("-webkit-text-stroke-color")
const webkitTextStroke = Markup.property("-webkit-text-stroke")
const webkitTextStrokeWidth = Markup.property("-webkit-text-stroke-width")
const textTransform = Markup.property("text-transform")
const textUnderline = Markup.property("text-underline")
const textUnderlineColor = Markup.property("text-underline-color")
const textUnderlineMode = Markup.property("text-underline-mode")
const textUnderlineOffset = Markup.property("text-underline-offset")
const textUnderlinePosition = Markup.property("text-underline-position")
const webkitTextUnderlinePosition = Markup.property("-webkit-text-underline-position")
const textUnderlineStyle = Markup.property("text-underline-style")
const textUnderlineWidth = Markup.property("text-underline-width")
const textWrap = Markup.property("text-wrap")
const webkitTextZoom = Markup.property("-webkit-text-zoom")
const top = Markup.property("top")
const touchAction = Markup.property("touch-action")
const touchActionDelay = Markup.property("touch-action-delay")
const msTouchAction = Markup.property("-ms-touch-action")
const webkitTouchCallout = Markup.property("-webkit-touch-callout")
const msTouchSelect = Markup.property("-ms-touch-select")
const appleTrailingWord = Markup.property("-apple-trailing-word")
const transform = Markup.property("transform")
const transformBox = Markup.property("transform-box")
const mozTransform = Markup.property("-moz-transform")
const msTransform = Markup.property("-ms-transform")
const oTransform = Markup.property("-o-transform")
const transformOrigin = Markup.property("transform-origin")
const mozTransformOrigin = Markup.property("-moz-transform-origin")
const msTransformOrigin = Markup.property("-ms-transform-origin")
const oTransformOrigin = Markup.property("-o-transform-origin")
const webkitTransformOrigin = Markup.property("-webkit-transform-origin")
const transformOriginX = Markup.property("transform-origin-x")
const webkitTransformOriginX = Markup.property("-webkit-transform-origin-x")
const transformOriginY = Markup.property("transform-origin-y")
const webkitTransformOriginY = Markup.property("-webkit-transform-origin-y")
const transformOriginZ = Markup.property("transform-origin-z")
const webkitTransformOriginZ = Markup.property("-webkit-transform-origin-z")
const transformStyle = Markup.property("transform-style")
const mozTransformStyle = Markup.property("-moz-transform-style")
const msTransformStyle = Markup.property("-ms-transform-style")
const webkitTransformStyle = Markup.property("-webkit-transform-style")
const webkitTransform = Markup.property("-webkit-transform")
const transition = Markup.property("transition")
const transitionDelay = Markup.property("transition-delay")
const mozTransitionDelay = Markup.property("-moz-transition-delay")
const msTransitionDelay = Markup.property("-ms-transition-delay")
const oTransitionDelay = Markup.property("-o-transition-delay")
const webkitTransitionDelay = Markup.property("-webkit-transition-delay")
const transitionDuration = Markup.property("transition-duration")
const mozTransitionDuration = Markup.property("-moz-transition-duration")
const msTransitionDuration = Markup.property("-ms-transition-duration")
const oTransitionDuration = Markup.property("-o-transition-duration")
const webkitTransitionDuration = Markup.property("-webkit-transition-duration")
const mozTransition = Markup.property("-moz-transition")
const msTransition = Markup.property("-ms-transition")
const oTransition = Markup.property("-o-transition")
const transitionProperty = Markup.property("transition-property")
const mozTransitionProperty = Markup.property("-moz-transition-property")
const msTransitionProperty = Markup.property("-ms-transition-property")
const oTransitionProperty = Markup.property("-o-transition-property")
const webkitTransitionProperty = Markup.property("-webkit-transition-property")
const transitionTimingFunction = Markup.property("transition-timing-function")
const mozTransitionTimingFunction = Markup.property("-moz-transition-timing-function")
const msTransitionTimingFunction = Markup.property("-ms-transition-timing-function")
const oTransitionTimingFunction = Markup.property("-o-transition-timing-function")
const webkitTransitionTimingFunction = Markup.property("-webkit-transition-timing-function")
const webkitTransition = Markup.property("-webkit-transition")
const translate = Markup.property("translate")
const ucAltSkin = Markup.property("uc-alt-skin")
const ucSkin = Markup.property("uc-skin")
const unicodeBidi = Markup.property("unicode-bidi")
const unicodeRange = Markup.property("unicode-range")
const webkitUserDrag = Markup.property("-webkit-user-drag")
const mozUserFocus = Markup.property("-moz-user-focus")
const mozUserInput = Markup.property("-moz-user-input")
const mozUserModify = Markup.property("-moz-user-modify")
const webkitUserModify = Markup.property("-webkit-user-modify")
const userSelect = Markup.property("user-select")
const mozUserSelect = Markup.property("-moz-user-select")
const msUserSelect = Markup.property("-ms-user-select")
const webkitUserSelect = Markup.property("-webkit-user-select")
const userZoom = Markup.property("user-zoom")
const vectorEffect = Markup.property("vector-effect")
const verticalAlign = Markup.property("vertical-align")
const viewTimeline = Markup.property("view-timeline")
const viewTimelineAxis = Markup.property("view-timeline-axis")
const viewTimelineInset = Markup.property("view-timeline-inset")
const viewTimelineName = Markup.property("view-timeline-name")
const viewportFill = Markup.property("viewport-fill")
const viewportFillOpacity = Markup.property("viewport-fill-opacity")
const viewportFit = Markup.property("viewport-fit")
const visibility = Markup.property("visibility")
const voiceBalance = Markup.property("voice-balance")
const voiceDuration = Markup.property("voice-duration")
const voiceFamily = Markup.property("voice-family")
const voicePitch = Markup.property("voice-pitch")
const voiceRange = Markup.property("voice-range")
const voiceRate = Markup.property("voice-rate")
const voiceStress = Markup.property("voice-stress")
const voiceVolume = Markup.property("voice-volume")
const volume = Markup.property("volume")
const whiteSpace = Markup.property("white-space")
const webkitWidgetRegion = Markup.property("-webkit-widget-region")
const widows = Markup.property("widows")
const width = Markup.property("width")
const willChange = Markup.property("will-change")
const mozWindowDragging = Markup.property("-moz-window-dragging")
const mozWindowShadow = Markup.property("-moz-window-shadow")
const wordBoundaryDetection = Markup.property("word-boundary-detection")
const wordBoundaryExpansion = Markup.property("word-boundary-expansion")
const wordBreak = Markup.property("word-break")
const wordSpacing = Markup.property("word-spacing")
const wordWrap = Markup.property("word-wrap")
const wrapAfter = Markup.property("wrap-after")
const wrapBefore = Markup.property("wrap-before")
const wrapFlow = Markup.property("wrap-flow")
const msWrapFlow = Markup.property("-ms-wrap-flow")
const webkitWrapFlow = Markup.property("-webkit-wrap-flow")
const wrapInside = Markup.property("wrap-inside")
const msWrapMargin = Markup.property("-ms-wrap-margin")
const webkitWrapMargin = Markup.property("-webkit-wrap-margin")
const webkitWrapPadding = Markup.property("-webkit-wrap-padding")
const webkitWrapShapeInside = Markup.property("-webkit-wrap-shape-inside")
const webkitWrapShapeOutside = Markup.property("-webkit-wrap-shape-outside")
const wrapThrough = Markup.property("wrap-through")
const msWrapThrough = Markup.property("-ms-wrap-through")
const webkitWrapThrough = Markup.property("-webkit-wrap-through")
const webkitWrap = Markup.property("-webkit-wrap")
const writingMode = Markup.property("writing-mode")
const webkitWritingMode = Markup.property("-webkit-writing-mode")
const x = Markup.property("x")
const y = Markup.property("y")
const zIndex = Markup.property("z-index")
const zoom = Markup.property("zoom")

// At-rules

const $charset = Markup.atRule("charset")
const $import = Markup.atRule("import")
const $namespace = Markup.atRule("namespace")
const $media = Markup.atRule("media")
const $supports = Markup.atRule("supports")
const $page = Markup.atRule("page")
const $keyframes = Markup.atRule("keyframes")
const $counterStyle = Markup.atRule("counter-style")
const $fontFeatureValues = Markup.atRule("font-feature-values")
const $layer = Markup.atRule("layer")
const $colorProfile = Markup.atRule("color-profile")
const $container = Markup.atRule("container")
const $fontPaletteValues = Markup.atRule("font-palette-values")
const $fontFace = Markup.atRule("font-face")


/** Evaluate template code (isolated from other modules). */
export function run(__code: string, __path: string, __build: SiteBuild) {
  const include = Markup.includeFrom(__path, __build)
  const loadFile = Markup.loadFileFrom(__path, __build.root)
  const liveReload = Markup.liveReloadFrom(__build.root, __build.watch)
  const linkTo = Markup.linkToFrom(__build.output, __build.watch)
  return eval(__code)
}
